name: Publish Latest Docker image

on:
  push:
    branches: ['master']

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Prepare:
    name: Prepare Environment
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Convert repository name to lowercase
        id: convert
        run: |
          IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          D_IMAGE_NAME=$(echo $IMAGE_NAME | cut -d'/' -f2)
          echo "D_IMAGE_NAME=$D_IMAGE_NAME" >> $GITHUB_ENV

      - name: Delete old Docker images
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          curl -X DELETE \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/users/${{github.repository_owner}}/packages/container/${{env.D_IMAGE_NAME}}

  Build-and-Push:
    name: Build and Push ${{ matrix.platform }}
    needs: Prepare
    runs-on: ${{ matrix.runner }}
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            tag_suffix: amd64
          - platform: linux/386
            runner: ubuntu-latest
            tag_suffix: i386
          - platform: linux/arm64/v8
            runner: ubuntu-24.04-arm
            tag_suffix: arm64
          - platform: linux/arm/v7
            runner: ubuntu-24.04-arm
            tag_suffix: armv7
          - platform: linux/arm/v6
            runner: ubuntu-24.04-arm
            tag_suffix: armv6
          - platform: linux/ppc64le
            runner: ubuntu-latest
            tag_suffix: ppc64le
          - platform: linux/riscv64
            runner: ubuntu-latest
            tag_suffix: riscv64
          - platform: linux/s390x
            runner: ubuntu-latest
            tag_suffix: s390x
    steps:
      - name: Free Disk-Space
        run: |
          df -h
          sudo apt-get clean
          docker system prune -a -f
          sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc
          df -h

      - name: Checkout
        uses: actions/checkout@main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        
      - name: Login to Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Convert repository name to lowercase
        id: convert
        run: |
          IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          D_IMAGE_NAME=$(echo $IMAGE_NAME | cut -d'/' -f2)
          echo "D_IMAGE_NAME=$D_IMAGE_NAME" >> $GITHUB_ENV

      - name: Build and push
        id: push
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.tag_suffix }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@main
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push: true

  Merge-and-Push:
    name: Merge architectures and push latest
    needs: Build-and-Push
    runs-on: ubuntu-latest
    permissions: write-all
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Convert repository name to lowercase
        id: convert
        run: |
          IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          D_IMAGE_NAME=$(echo $IMAGE_NAME | cut -d'/' -f2)
          echo "D_IMAGE_NAME=$D_IMAGE_NAME" >> $GITHUB_ENV

      - name: Login to Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Create and push manifest list
        run: |
          # Define all possible architecture tags from the matrix
          TAGS=("amd64" "i386" "arm64" "armv7" "armv6" "ppc64le" "riscv64" "s390x")
          
          # Initialize a variable to hold the list of images that were successfully built
          SUCCESSFUL_IMAGES=""
          
          # Check for the existence of each image on the registry
          for tag in "${TAGS[@]}"; do
            IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$tag"
            
            echo "Checking for image: $IMAGE_REF"
            # The 'imagetools inspect' command returns a non-zero exit code if the image doesn't exist
            if docker buildx imagetools inspect "$IMAGE_REF" > /dev/null 2>&1; then
              echo "Image found. Adding to merge list."
              SUCCESSFUL_IMAGES="$SUCCESSFUL_IMAGES $IMAGE_REF"
            else
              echo "Image not found for tag $tag. It may have failed to build."
            fi
          done
          
          # Only attempt to create the manifest if there are successful images to merge
          if [ -n "$SUCCESSFUL_IMAGES" ]; then
            echo "Merging the following images into the 'latest' tag: $SUCCESSFUL_IMAGES"
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
              $SUCCESSFUL_IMAGES
          else
            echo "No successful images found to merge. Skipping manifest creation."
            # Exit successfully to prevent the workflow from being marked as a failure
            exit 0
          fi
          
      - name: Delete Temporary Images
        id: cleanup
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          VERSION_IDS=$(curl -s -X GET \
            -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/users/${{github.repository_owner}}/packages/container/${{env.D_IMAGE_NAME}}/versions" | \
            jq -r '.[] | select(.metadata.container.tags[] | startswith("${{ github.sha }}")) | .id')

          if [ -n "$VERSION_IDS" ]; then
            echo "$VERSION_IDS"
            for version_id in $VERSION_IDS; do
              echo "$version_id..."
              curl -X DELETE \
                -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/users/${{github.repository_owner}}/packages/container/${{env.D_IMAGE_NAME}}/versions/$version_id"
            done
          else
            echo "No temporary images to delete."
          fi

  Finalize:
    name: Finalize Workflow
    needs: Merge-and-Push
    runs-on: ubuntu-latest
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
